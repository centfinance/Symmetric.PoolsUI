# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.7
  aws-s3: circleci/aws-s3@3.0.0
  aws-code-deploy: circleci/aws-code-deploy@2.0.0


jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-deploy:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:16.10
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
        - checkout
        # Next, the node orb's install-packages step will install the dependencies from a package.json.
        # The orb install-packages step will also automatically cache them for faster future runs.
        - node/install-packages:
            # If you are using yarn, change the line below from "npm" to "yarn"
            pkg-manager: npm
        - run:
            name: Setting Env Variable
            # VUE_APP_ENV=production
            # VUE_APP_NETWORK=celo
            command: |
              touch .env
              echo "VUE_APP_ENV=production /n VUE_APP_NETWORK=$APP_NETWORK_CELO" > .env
        - run:
            name: Run Build
            command: npm run build
        - run:
            name: Compress Artifacts
            command: zip -qr dist_$APP_NETWORK_CELO.zip ./dist appspec.yml
        - aws-s3/copy:
            from: dist_$APP_NETWORK_CELO.zip 
            to: s3://symmetric-pools-ui-bucket/uat/ 
        - run:    
            name: Iniitate Code-Deploy
            command: |
              ID=$(aws deploy create-deployment \
                    --application-name $APP_NAME \
                    --deployment-config-name CodeDeployDefault.AllAtOnce \
                    --deployment-group-name $DEPLOYMENT_GROUP \
                    --s3-location bucket=symmetric-pools-ui-bucket,bundleType=zip,key=uat/dist_$APP_NETWORK_CELO.zip \
                    --description "Deployed via CircleCI")
              STATUS=$(aws deploy get-deployment \
                              --deployment-id $ID)
              while [[ $STATUS == "Created" || $STATUS == "InProgress" || $STATUS == "Pending" || $STATUS == "Queued" || $STATUS == "Ready" ]]; do
                      echo "Status: $STATUS..."
                      STATUS=$(aws deploy get-deployment \
                                --deployment-id $ID)
                      sleep 5
                    done
                    if [[ $STATUS == "Succeeded" ]]; then
                      EXITCODE=0
                      echo "Deployment finished."
                    else
                      EXITCODE=1
                      echo "Deployment failed!"
                    fi
                    aws deploy get-deployment --deployment-id $ID
                    exit $EXITCODE



workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  Build-and-Deploy:
    jobs:
      - build-and-deploy
      # - aws-code-deploy/deploy:
      #     requires: [build-and-deploy]
      #     application-name: $APP_NAME
      #     bundle-bucket: $BUNDLE_BUCKET
      #     bundle-key: uat/dist_$BUNDLE_KEY
      #     deployment-group: $DEPLOYMENT_GROUP
      #     service-role-arn: $SERVICE_ROLE_ARN
      #     bundle-type: tar
      #     deployment-config: CodeDeployDefault.AllAtOnce


